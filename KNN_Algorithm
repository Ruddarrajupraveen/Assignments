def ED(dataset, test_point, k):
    dist = []
    for group in dataset:
        for feature in dataset[group]:
        # calculating the euclidean distance
        euclidean_distance = ((feature[0] - test_point[0]) ** 2 + (feature[1] - test_point[1] ** 2) ** 0.5
        
        dist.append((euclidean_distance,group))
        
        
  #sorting
   distance = sorted(dist)[:k]
   
   f1 = 0
   f2 = 0
   
   for i in distance:
       if i[1] == 0:
           f1 += 1
       elif i[1] ==1:
           f2 += 1
           
   if f1 > f2:
       return 0
   else:
       return 1
 
 #KNN function
def knn():
    dataset = {0: [(1, 1), (1, 2), (2, 1), (1.8, 1.9), (1, 2), (1.5, 3.5), (1, 5)],
               1: [(5, 2.5), (4.5, 5), (5, 6), (5.5, 4), (6, 3), (6, 5), (7, 4)]}
               
   # test point (x,y)
    test_point = (2, 4)
    
   # k value( no of neighbours)
    k = 3
    
    print("The class of test point",test_point,"lies in class",(ED(dataset, test_point, k)))
knn()
